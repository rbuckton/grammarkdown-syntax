# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Grammarkdown
scopeName: source.grammar
fileTypes: [gramarkdown,grammar,gmd]
uuid: 6b58beb0-cbc3-4318-b011-1a82fda91bee

patterns:
- include: '#gmd'

repository:
  gmd:
    patterns:
      - include: '#gmd-comment'
      - include: '#gmd-string'
      - include: '#gmd-keyword'
      - include: '#gmd-production'
      - include: '#gmd-rhs'
      - include: '#gmd-trivia'
      - include: '#gmd-meta'

  gmd-trivia:
    patterns:
      - match: (<)(ins|del)([^>]*)(>)
        captures:
          '1': { name: punctuation.definition.tag.grammar }
          '2': { name: entity.name.tag.grammar }
          '3': { patterns: [include: '#attributes'] }
          '4': { name: punctuation.definition.tag.grammar }
        name: trivia.grammar
      - match: (<\/)(ins|del)(>)
        captures:
          '1': { name: punctuation.definition.tag.grammar }
          '2': { name: entity.name.tag.grammar }
          '3': { patterns: [include: '#attributes'] }
          '4': { name: punctuation2.definition.tag.grammar }
        name: trivia.grammar

  gmd-comment:
    patterns:
      - include: '#gmd-comment-line'
      - include: '#gmd-comment-block'

  gmd-comment-line:
    match: //.*$\n?
    name: comment.line.grammar

  gmd-comment-block:
    begin: /\*
    end: \*/
    name: comment.block.grammar

  gmd-string:
    patterns:
      - include: '#gmd-string-single'
      - include: '#gmd-string-double'

  gmd-string-single:
    match: ('[^']*?')
    name: string.quoted.single.grammar

  gmd-string-double:
    match: ("[^"]*?")
    name: string.quoted.double.grammar

  gmd-keyword:
    match: \b(but|empty|goal|here|if|import|lexical|lookahead|match|no|not|of|one|or|through)\b
    name: keyword.control.grammar

  gmd-production:
    begin: (\w+)(?=(?:\s*\[(\s*\w+\s*,?)*\])?\s*:{1,3})
    beginCaptures:
      '1': { name: entity.name.function.production.goal.grammar }
    end: (?:(:::)|(::)|(:))
    endCaptures:
      '1': { name: punctuation.production.triple-colon.grammar }
      '2': { name: punctuation.production.double-colon.grammar }
      '3': { name: punctuation.production.single-colon.grammar }
    patterns:
    - include: '#gmd-parameters'
    name: meta.production.grammar

  gmd-parameters:
    begin: \[
    end: \]
    patterns:
    - include: "#gmd-parameter"

  gmd-parameter:
    match: \b\w+\b
    name: variable.parameter.grammar

  gmd-rhs:
    patterns:
    - include: '#gmd-prose'
    - include: '#gmd-symbol'
    - include: '#gmd-link'

  gmd-link:
    match: \#[-\w_]+
    name: markup.underline.link.grammar

  gmd-prose:
    begin: ^\s+>
    end: $
    patterns:
    - include: '#gmd-prose-content'
    name: markup.quote.bold.grammar

  gmd-prose-content:
    patterns:
    - include: '#gmd-string'
    - include: '#gmd-nonterminal-embed'
    - include: '#gmd-arguments'
    - include: '#gmd-token'
    - include: source.emd-inline

  gmd-symbol:
    patterns:
    - include: '#gmd-assertion'
    - include: '#gmd-token'
    - include: '#gmd-nonterminal'

  gmd-assertion:
    name: meta.assertion.grammar
    patterns:
    - include: "#gmd-empty-assertion"
    - include: "#gmd-parameter-assertion"
    - include: "#gmd-lexical-goal-assertion"
    - include: "#gmd-no-symbol-here-assertion"
    - include: "#gmd-lookahead-assertion"
    - include: '#gmd-prose-assertion'
    - include: '#gmd-match-assertion'

  gmd-empty-assertion:
    match: \[\s*(empty)\s*\]
    captures:
      '1': { name: keyword.control.grammar }

  gmd-parameter-assertion:
    match: \[\s*[+~]\s*(\w+)\s*\]
    captures:
      '1': { name: variable.parameter.grammar }

  gmd-lexical-goal-assertion:
    match: \[\s*(lexical)\s+(goal)\s+(\w+)\s*]
    captures:
      '1': { name: keyword.control.grammar }
      '2': { name: keyword.control.grammar }
      '3': { name: variable.other.nonterminal.grammar }

  gmd-no-symbol-here-assertion:
    begin: \[\s*(no)\b
    beginCaptures:
      '1': { name: keyword.control.grammar }
    end: \b(here)\s*\]
    endCaptures:
      '1': { name: keyword.control.grammar }
    patterns:
    - include: '#gmd-keyword'
    - include: '#gmd-token'
    - include: '#gmd-nonterminal-id'

  gmd-lookahead-assertion:
    begin: \[\s*(lookahead)\b
    beginCaptures:
      '1': { name: keyword.control.grammar }
    end: \]
    patterns:
    - include: '#gmd-token'
    - include: '#gmd-nonterminal'

  gmd-prose-assertion:
    begin: \[<
    end: \]
    patterns:
    - include: '#gmd-prose-assertion-content'

  gmd-prose-assertion-nested:
    begin: \[
    end: \]
    patterns:
    - include: '#gmd-prose-assertion-content'

  gmd-prose-assertion-content:
    patterns:
    - include: '#gmd-prose-content'
    - include: '#gmd-prose-assertion-nested'

  gmd-match-assertion:
    begin: \[\s*(match|but)\s+(only)\s+(if)\b
    beginCaptures:
      '1': { name: keyword.control.grammar }
      '2': { name: keyword.control.grammar }
      '3': { name: keyword.control.grammar }
    end: \]
    patterns:
    - include: '#gmd-prose-assertion-content'

  gmd-token:
    patterns:
    - include: "#gmd-terminal"
    - include: "#gmd-unicode-character-literal"

  gmd-terminal:
    match: "```|`.+?`"
    name: string.quoted.single.terminal.grammar

  gmd-unicode-character-literal:
    match: <[A-Z]+>|&lt;[A-Z]+&gt;|(?i)\bU\+[\da-f]{4}\b
    name: constant.numeric.grammar

  gmd-nonterminal:
    patterns:
    - include: '#gmd-nonterminal-id'
    - include: '#gmd-arguments'

  gmd-nonterminal-id:
    patterns:
    - include: '#gmd-nonterminal-id-rhs'
    - include: '#gmd-nonterminal-embed'

  gmd-nonterminal-embed:
    begin: \|
    end: \|
    patterns:
    - include: '#gmd-nonterminal-id-rhs'

  gmd-nonterminal-id-rhs:
    match: \b\w+\b
    name: variable.other.nonterminal.markup.italic.grammar

  gmd-arguments:
    begin: \[
    end: \]
    patterns:
    - include: '#gmd-argument'

  gmd-argument:
    match: \b\w+\b
    name: variable.parameter.grammar

  gmd-meta:
    patterns:
      - include: '#gmd-import'
      - include: '#gmd-define'
      - include: '#gmd-line'

  gmd-import:
    match: '(@)(import)'
    captures:
      '1': { name: keyword.operator.grammar }
      '2': { name: keyword.other.grammar }

  gmd-define:
    match: '(@)(define)(?:\s+([a-zA-Z]+)(?:\s+(?:(true|false)|(default)))?)?'
    captures:
      '1': { name: keyword.operator.grammar }
      '2': { name: keyword.other.grammar }
      '3': { name: constant.other.grammar }
      '4': { name: constant.language.grammar }
      '5': { name: leuwprd.other.grammar }

  gmd-line:
    match: (@)(line)(?:\s+(?:(default)|(\d+)))?
    captures:
      '1': { name: keyword.operator.grammar }
      '2': { name: keyword.other.grammar }
      '3': { name: keyword.other.grammar }
      '4': { name: constant.numeric.grammar }

  attributes:
    patterns:
      - include: '#tag-generic-attribute'
      - include: '#string'
      - include: '#entities'

  tag-generic-attribute:
    match: (?<=[^=])\b([a-zA-Z0-9:-]+)
    name: entity.other.attribute-name.grammar

  string:
    patterns:
      - include: '#string-double-quoted'
      - include: '#string-single-quoted'

  string-double-quoted:
    begin: '"'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.grammar }
    end: '"'
    endCaptures:
      '0': { name: punctuation.definition.string.end.grammar }
    name: string.quoted.double.grammar
    patterns:
      - include: '#entities'

  string-single-quoted:
    begin: "'"
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.grammar }
    end: "'"
    endCaptures:
      '0': { name: punctuation.definition.string.end.grammar }
    name: string.quoted.single.grammar
    patterns:
      - include: '#entities'

  entities:
    patterns:
      - match: '(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)'
        captures:
          '1': { name: punctuation.definition.entity.grammar }
          '3': { name: punctuation.definition.entity.grammar }
        name: constant.character.entity.grammar
      - match: '&'
        name: invalid.illegal.bad-ampersand.grammar
...